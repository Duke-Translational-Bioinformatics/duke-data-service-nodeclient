/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.FoldersApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Folders service.
   * @module api/FoldersApi
   * @version 0.0.2
   */

  /**
   * Constructs a new FoldersApi. 
   * @alias module:api/FoldersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1FoldersId operation.
     * @callback module:api/FoldersApi~deleteApiV1FoldersIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a folder
     * Delete a folder  Remove the folder for a given uuid.
     * @param {Integer} id 
     * @param {module:api/FoldersApi~deleteApiV1FoldersIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1FoldersId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1FoldersId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/folders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1FoldersId operation.
     * @callback module:api/FoldersApi~getApiV1FoldersIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View folder details
     * View folder details  Returns the folder details for a given uuid of a folder.
     * @param {Integer} id 
     * @param {module:api/FoldersApi~getApiV1FoldersIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1FoldersId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1FoldersId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/folders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1FoldersIdChildren operation.
     * @callback module:api/FoldersApi~getApiV1FoldersIdChildrenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List folder children
     * List folder children  Returns the immediate children of the folder.
     * @param {Integer} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameContains list children whose name contains this string
     * @param {Integer} opts.page Requested Page (default first page)
     * @param {Integer} opts.perPage Number of Objects per page (default 25)
     * @param {module:api/FoldersApi~getApiV1FoldersIdChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1FoldersIdChildren = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1FoldersIdChildren";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'name_contains': opts['nameContains'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/folders/{id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1Folders operation.
     * @callback module:api/FoldersApi~postApiV1FoldersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project folder
     * Create a project folder  Creates a project folder for the given payload.
     * @param {String} parentKind Parent kind
     * @param {String} parentId Parent ID
     * @param {String} name Folder Name
     * @param {module:api/FoldersApi~postApiV1FoldersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1Folders = function(parentKind, parentId, name, callback) {
      var postBody = null;

      // verify the required parameter 'parentKind' is set
      if (parentKind == undefined || parentKind == null) {
        throw "Missing the required parameter 'parentKind' when calling postApiV1Folders";
      }

      // verify the required parameter 'parentId' is set
      if (parentId == undefined || parentId == null) {
        throw "Missing the required parameter 'parentId' when calling postApiV1Folders";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling postApiV1Folders";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'parent[kind]': parentKind,
        'parent[id]': parentId,
        'name': name
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1FoldersIdMove operation.
     * @callback module:api/FoldersApi~putApiV1FoldersIdMoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move folder
     * Move folder  Move a folder with a given uuid to a new parent.
     * @param {String} parentKind Parent kind
     * @param {String} parentId Parent ID
     * @param {Integer} id 
     * @param {module:api/FoldersApi~putApiV1FoldersIdMoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1FoldersIdMove = function(parentKind, parentId, id, callback) {
      var postBody = null;

      // verify the required parameter 'parentKind' is set
      if (parentKind == undefined || parentKind == null) {
        throw "Missing the required parameter 'parentKind' when calling putApiV1FoldersIdMove";
      }

      // verify the required parameter 'parentId' is set
      if (parentId == undefined || parentId == null) {
        throw "Missing the required parameter 'parentId' when calling putApiV1FoldersIdMove";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1FoldersIdMove";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'parent[kind]': parentKind,
        'parent[id]': parentId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/folders/{id}/move', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1FoldersIdRename operation.
     * @callback module:api/FoldersApi~putApiV1FoldersIdRenameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename folder
     * Rename folder  Give a folder with a given uuid a new name.
     * @param {String} name 
     * @param {Integer} id 
     * @param {module:api/FoldersApi~putApiV1FoldersIdRenameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1FoldersIdRename = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling putApiV1FoldersIdRename";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1FoldersIdRename";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/folders/{id}/rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
