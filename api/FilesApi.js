/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.FilesApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Files service.
   * @module api/FilesApi
   * @version 0.0.2
   */

  /**
   * Constructs a new FilesApi. 
   * @alias module:api/FilesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1FilesId operation.
     * @callback module:api/FilesApi~deleteApiV1FilesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a file metadata object
     * Delete a file metadata object  Deletes the file from view
     * @param {Integer} id 
     * @param {module:api/FilesApi~deleteApiV1FilesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1FilesId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1FilesId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1FilesId operation.
     * @callback module:api/FilesApi~getApiV1FilesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View file metadata object details
     * View file metadata object details  Access metadata details about a file.
     * @param {Integer} id 
     * @param {module:api/FilesApi~getApiV1FilesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1FilesId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1FilesId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1FilesIdUrl operation.
     * @callback module:api/FilesApi~getApiV1FilesIdUrlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a file
     * Download a file  Generates and returns a storage provider specific pre-signed URL that client can use to download file.
     * @param {Integer} id 
     * @param {module:api/FilesApi~getApiV1FilesIdUrlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1FilesIdUrl = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1FilesIdUrl";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1FilesIdVersions operation.
     * @callback module:api/FilesApi~getApiV1FilesIdVersionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List file versions
     * List file versions  If there are previous versions of a file, this action can be used to retrieve information about the older versions.
     * @param {Integer} id 
     * @param {module:api/FilesApi~getApiV1FilesIdVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1FilesIdVersions = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1FilesIdVersions";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1Files operation.
     * @callback module:api/FilesApi~postApiV1FilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a file
     * Create a file  Creates a project file for the given payload.
     * @param {String} parentKind Parent kind
     * @param {String} parentId Parent UUID
     * @param {String} uploadId Upload UUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.label 
     * @param {module:api/FilesApi~postApiV1FilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1Files = function(parentKind, parentId, uploadId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'parentKind' is set
      if (parentKind == undefined || parentKind == null) {
        throw "Missing the required parameter 'parentKind' when calling postApiV1Files";
      }

      // verify the required parameter 'parentId' is set
      if (parentId == undefined || parentId == null) {
        throw "Missing the required parameter 'parentId' when calling postApiV1Files";
      }

      // verify the required parameter 'uploadId' is set
      if (uploadId == undefined || uploadId == null) {
        throw "Missing the required parameter 'uploadId' when calling postApiV1Files";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'parent[kind]': parentKind,
        'parent[id]': parentId,
        'upload[id]': uploadId,
        'label': opts['label']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1FilesId operation.
     * @callback module:api/FilesApi~putApiV1FilesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update file properties
     * Update file properties  Updates one or more file resource properties; if this action modifies the upload property, the previous file resource is transitioned to version history (see File Versions)
     * @param {String} uploadId Upload UUID
     * @param {Integer} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.label 
     * @param {module:api/FilesApi~putApiV1FilesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1FilesId = function(uploadId, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uploadId' is set
      if (uploadId == undefined || uploadId == null) {
        throw "Missing the required parameter 'uploadId' when calling putApiV1FilesId";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1FilesId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'upload[id]': uploadId,
        'label': opts['label']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1FilesIdMove operation.
     * @callback module:api/FilesApi~putApiV1FilesIdMoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move file
     * Move file  Move a file metadata object to a new parent
     * @param {String} parentKind Parent kind
     * @param {String} parentId Parent ID
     * @param {Integer} id 
     * @param {module:api/FilesApi~putApiV1FilesIdMoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1FilesIdMove = function(parentKind, parentId, id, callback) {
      var postBody = null;

      // verify the required parameter 'parentKind' is set
      if (parentKind == undefined || parentKind == null) {
        throw "Missing the required parameter 'parentKind' when calling putApiV1FilesIdMove";
      }

      // verify the required parameter 'parentId' is set
      if (parentId == undefined || parentId == null) {
        throw "Missing the required parameter 'parentId' when calling putApiV1FilesIdMove";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1FilesIdMove";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'parent[kind]': parentKind,
        'parent[id]': parentId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}/move', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1FilesIdRename operation.
     * @callback module:api/FilesApi~putApiV1FilesIdRenameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename file
     * Rename file  Rename a file metadata object
     * @param {String} name New name for File
     * @param {Integer} id 
     * @param {module:api/FilesApi~putApiV1FilesIdRenameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1FilesIdRename = function(name, id, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling putApiV1FilesIdRename";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1FilesIdRename";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/files/{id}/rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
