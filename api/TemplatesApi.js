/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.TemplatesApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Templates service.
   * @module api/TemplatesApi
   * @version 0.0.2
   */

  /**
   * Constructs a new TemplatesApi. 
   * @alias module:api/TemplatesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1TemplatesId operation.
     * @callback module:api/TemplatesApi~deleteApiV1TemplatesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a template
     * Delete a template  Deletes a template.
     * @param {String} id Template UUID
     * @param {module:api/TemplatesApi~deleteApiV1TemplatesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1TemplatesId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1TemplatesId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1Templates operation.
     * @callback module:api/TemplatesApi~getApiV1TemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List templates
     * List templates  List templates.
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameContains list templates whose name contains the specified string
     * @param {module:api/TemplatesApi~getApiV1TemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1Templates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name_contains': opts['nameContains']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1TemplatesId operation.
     * @callback module:api/TemplatesApi~getApiV1TemplatesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View template details
     * View template details  Returns the template details for a given UUID.
     * @param {String} id Template UUID
     * @param {module:api/TemplatesApi~getApiV1TemplatesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1TemplatesId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1TemplatesId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1TemplatesTemplateIdProperties operation.
     * @callback module:api/TemplatesApi~getApiV1TemplatesTemplateIdPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List properties
     * List properties  List properties.
     * @param {Integer} templateId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The unique key of the template property
     * @param {module:api/TemplatesApi~getApiV1TemplatesTemplateIdPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1TemplatesTemplateIdProperties = function(templateId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling getApiV1TemplatesTemplateIdProperties";
      }


      var pathParams = {
        'template_id': templateId
      };
      var queryParams = {
        'key': opts['key']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates/{template_id}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1Templates operation.
     * @callback module:api/TemplatesApi~postApiV1TemplatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create template
     * Create template  Creates a template.
     * @param {String} name The unique name of the template
     * @param {String} label A short display label for the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.description A verbose description of the template
     * @param {module:api/TemplatesApi~postApiV1TemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1Templates = function(name, label, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling postApiV1Templates";
      }

      // verify the required parameter 'label' is set
      if (label == undefined || label == null) {
        throw "Missing the required parameter 'label' when calling postApiV1Templates";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'label': label,
        'description': opts['description']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1TemplatesTemplateIdProperties operation.
     * @callback module:api/TemplatesApi~postApiV1TemplatesTemplateIdPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create property
     * Create property  Creates a property.
     * @param {String} key The unique key of the property
     * @param {String} label A short display label for the property
     * @param {String} description A verbose description of the property
     * @param {String} type The datatype of the key’s value; currenty only the Elasticsearch core datatypes are supported
     * @param {Integer} templateId 
     * @param {module:api/TemplatesApi~postApiV1TemplatesTemplateIdPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1TemplatesTemplateIdProperties = function(key, label, description, type, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw "Missing the required parameter 'key' when calling postApiV1TemplatesTemplateIdProperties";
      }

      // verify the required parameter 'label' is set
      if (label == undefined || label == null) {
        throw "Missing the required parameter 'label' when calling postApiV1TemplatesTemplateIdProperties";
      }

      // verify the required parameter 'description' is set
      if (description == undefined || description == null) {
        throw "Missing the required parameter 'description' when calling postApiV1TemplatesTemplateIdProperties";
      }

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling postApiV1TemplatesTemplateIdProperties";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling postApiV1TemplatesTemplateIdProperties";
      }


      var pathParams = {
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'key': key,
        'label': label,
        'description': description,
        'type': type
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates/{template_id}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1TemplatesId operation.
     * @callback module:api/TemplatesApi~putApiV1TemplatesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update template
     * Update template  Updates template UUID.
     * @param {String} id Template UUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The Name of the template
     * @param {String} opts.label The Label of the template
     * @param {String} opts.description The Description of the template
     * @param {module:api/TemplatesApi~putApiV1TemplatesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1TemplatesId = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1TemplatesId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'label': opts['label'],
        'description': opts['description']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
