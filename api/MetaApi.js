/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.MetaApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Meta service.
   * @module api/MetaApi
   * @version 0.0.2
   */

  /**
   * Constructs a new MetaApi. 
   * @alias module:api/MetaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1MetaObjectKindObjectIdTemplateId operation.
     * @callback module:api/MetaApi~deleteApiV1MetaObjectKindObjectIdTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete objet metadata
     * Delete objet metadata  Deletes objet metadata
     * @param {Integer} objectKind 
     * @param {Integer} objectId 
     * @param {Integer} templateId 
     * @param {module:api/MetaApi~deleteApiV1MetaObjectKindObjectIdTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1MetaObjectKindObjectIdTemplateId = function(objectKind, objectId, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'objectKind' is set
      if (objectKind == undefined || objectKind == null) {
        throw "Missing the required parameter 'objectKind' when calling deleteApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'objectId' is set
      if (objectId == undefined || objectId == null) {
        throw "Missing the required parameter 'objectId' when calling deleteApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling deleteApiV1MetaObjectKindObjectIdTemplateId";
      }


      var pathParams = {
        'object_kind': objectKind,
        'object_id': objectId,
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/meta/{object_kind}/{object_id}/{template_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1MetaObjectKindObjectId operation.
     * @callback module:api/MetaApi~getApiV1MetaObjectKindObjectIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View all object metadata
     * View all object metadata  Used to retrieve all metadata associated with a DDS object, optionally find a template instance by name.
     * @param {Integer} objectKind 
     * @param {Integer} objectId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.metaTemplateName The unique meta_template_name of the template; performs an exact match.
     * @param {module:api/MetaApi~getApiV1MetaObjectKindObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1MetaObjectKindObjectId = function(objectKind, objectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'objectKind' is set
      if (objectKind == undefined || objectKind == null) {
        throw "Missing the required parameter 'objectKind' when calling getApiV1MetaObjectKindObjectId";
      }

      // verify the required parameter 'objectId' is set
      if (objectId == undefined || objectId == null) {
        throw "Missing the required parameter 'objectId' when calling getApiV1MetaObjectKindObjectId";
      }


      var pathParams = {
        'object_kind': objectKind,
        'object_id': objectId
      };
      var queryParams = {
        'meta_template_name': opts['metaTemplateName']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/meta/{object_kind}/{object_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1MetaObjectKindObjectIdTemplateId operation.
     * @callback module:api/MetaApi~getApiV1MetaObjectKindObjectIdTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View object metadata
     * View object metadata  Used to retrieve the metadata template instance for a corresponding DDS object.
     * @param {Integer} objectKind 
     * @param {Integer} objectId 
     * @param {Integer} templateId 
     * @param {module:api/MetaApi~getApiV1MetaObjectKindObjectIdTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1MetaObjectKindObjectIdTemplateId = function(objectKind, objectId, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'objectKind' is set
      if (objectKind == undefined || objectKind == null) {
        throw "Missing the required parameter 'objectKind' when calling getApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'objectId' is set
      if (objectId == undefined || objectId == null) {
        throw "Missing the required parameter 'objectId' when calling getApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling getApiV1MetaObjectKindObjectIdTemplateId";
      }


      var pathParams = {
        'object_kind': objectKind,
        'object_id': objectId,
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/meta/{object_kind}/{object_id}/{template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1MetaObjectKindObjectIdTemplateId operation.
     * @callback module:api/MetaApi~postApiV1MetaObjectKindObjectIdTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create object metadata
     * Create object metadata  Creates object metadata.
     * @param {Array.<String>} propertiesKey The property key to set
     * @param {Array.<String>} propertiesValue The key value
     * @param {Integer} objectKind 
     * @param {Integer} objectId 
     * @param {Integer} templateId 
     * @param {module:api/MetaApi~postApiV1MetaObjectKindObjectIdTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1MetaObjectKindObjectIdTemplateId = function(propertiesKey, propertiesValue, objectKind, objectId, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'propertiesKey' is set
      if (propertiesKey == undefined || propertiesKey == null) {
        throw "Missing the required parameter 'propertiesKey' when calling postApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'propertiesValue' is set
      if (propertiesValue == undefined || propertiesValue == null) {
        throw "Missing the required parameter 'propertiesValue' when calling postApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'objectKind' is set
      if (objectKind == undefined || objectKind == null) {
        throw "Missing the required parameter 'objectKind' when calling postApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'objectId' is set
      if (objectId == undefined || objectId == null) {
        throw "Missing the required parameter 'objectId' when calling postApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling postApiV1MetaObjectKindObjectIdTemplateId";
      }


      var pathParams = {
        'object_kind': objectKind,
        'object_id': objectId,
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'properties[][key]': this.apiClient.buildCollectionParam(propertiesKey, 'csv'),
        'properties[][value]': this.apiClient.buildCollectionParam(propertiesValue, 'csv')
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/meta/{object_kind}/{object_id}/{template_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1MetaObjectKindObjectIdTemplateId operation.
     * @callback module:api/MetaApi~putApiV1MetaObjectKindObjectIdTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update object metadata
     * Update object metadata  Updates object metadata
     * @param {Array.<String>} propertiesKey The property key to set
     * @param {Array.<String>} propertiesValue The key value
     * @param {Integer} objectKind 
     * @param {Integer} objectId 
     * @param {Integer} templateId 
     * @param {module:api/MetaApi~putApiV1MetaObjectKindObjectIdTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1MetaObjectKindObjectIdTemplateId = function(propertiesKey, propertiesValue, objectKind, objectId, templateId, callback) {
      var postBody = null;

      // verify the required parameter 'propertiesKey' is set
      if (propertiesKey == undefined || propertiesKey == null) {
        throw "Missing the required parameter 'propertiesKey' when calling putApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'propertiesValue' is set
      if (propertiesValue == undefined || propertiesValue == null) {
        throw "Missing the required parameter 'propertiesValue' when calling putApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'objectKind' is set
      if (objectKind == undefined || objectKind == null) {
        throw "Missing the required parameter 'objectKind' when calling putApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'objectId' is set
      if (objectId == undefined || objectId == null) {
        throw "Missing the required parameter 'objectId' when calling putApiV1MetaObjectKindObjectIdTemplateId";
      }

      // verify the required parameter 'templateId' is set
      if (templateId == undefined || templateId == null) {
        throw "Missing the required parameter 'templateId' when calling putApiV1MetaObjectKindObjectIdTemplateId";
      }


      var pathParams = {
        'object_kind': objectKind,
        'object_id': objectId,
        'template_id': templateId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'properties[][key]': this.apiClient.buildCollectionParam(propertiesKey, 'csv'),
        'properties[][value]': this.apiClient.buildCollectionParam(propertiesValue, 'csv')
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/meta/{object_kind}/{object_id}/{template_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
