/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.SoftwareagentsApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Softwareagents service.
   * @module api/SoftwareagentsApi
   * @version 0.0.2
   */

  /**
   * Constructs a new SoftwareagentsApi. 
   * @alias module:api/SoftwareagentsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1SoftwareAgentsId operation.
     * @callback module:api/SoftwareagentsApi~deleteApiV1SoftwareAgentsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Software Agent
     * Delete a Software Agent  Marks a software agent as being deleted.
     * @param {String} id Software Agent UUID
     * @param {module:api/SoftwareagentsApi~deleteApiV1SoftwareAgentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1SoftwareAgentsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1SoftwareAgentsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiV1SoftwareAgentsIdApiKey operation.
     * @callback module:api/SoftwareagentsApi~deleteApiV1SoftwareAgentsIdApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete software agent API key
     * Delete software agent API key  delete software_agent api_key
     * @param {String} id Software agent UUID
     * @param {module:api/SoftwareagentsApi~deleteApiV1SoftwareAgentsIdApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1SoftwareAgentsIdApiKey = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1SoftwareAgentsIdApiKey";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/{id}/api_key', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1SoftwareAgents operation.
     * @callback module:api/SoftwareagentsApi~getApiV1SoftwareAgentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List software agents
     * List software agents  Lists all software agents (software_agent gets empty list)
     * @param {module:api/SoftwareagentsApi~getApiV1SoftwareAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1SoftwareAgents = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1SoftwareAgentsId operation.
     * @callback module:api/SoftwareagentsApi~getApiV1SoftwareAgentsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View software agent details
     * View software agent details  Returns the software agent details for a given UUID.
     * @param {String} id Software agent UUID
     * @param {module:api/SoftwareagentsApi~getApiV1SoftwareAgentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1SoftwareAgentsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1SoftwareAgentsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1SoftwareAgentsIdApiKey operation.
     * @callback module:api/SoftwareagentsApi~getApiV1SoftwareAgentsIdApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View software agent API key
     * View software agent API key  View software_agent api_key
     * @param {String} id Software agent UUID
     * @param {module:api/SoftwareagentsApi~getApiV1SoftwareAgentsIdApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1SoftwareAgentsIdApiKey = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1SoftwareAgentsIdApiKey";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/{id}/api_key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1SoftwareAgents operation.
     * @callback module:api/SoftwareagentsApi~postApiV1SoftwareAgentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a software agent
     * Create a software agent  Creates a software agent for the given payload.
     * @param {String} name The Name of the software agent
     * @param {Object} opts Optional parameters
     * @param {String} opts.description The Description of the software agent
     * @param {String} opts.repoUrl The url of the repository (e.g. Git, Bitbucket, etc.) that contains the agent source code.
     * @param {module:api/SoftwareagentsApi~postApiV1SoftwareAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1SoftwareAgents = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling postApiV1SoftwareAgents";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'description': opts['description'],
        'repo_url': opts['repoUrl']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1SoftwareAgentsApiToken operation.
     * @callback module:api/SoftwareagentsApi~postApiV1SoftwareAgentsApiTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get software agent access token
     * Get software agent access token  Get software agent access token
     * @param {String} agentKey Software agent secret key
     * @param {String} userKey User secret key
     * @param {module:api/SoftwareagentsApi~postApiV1SoftwareAgentsApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1SoftwareAgentsApiToken = function(agentKey, userKey, callback) {
      var postBody = null;

      // verify the required parameter 'agentKey' is set
      if (agentKey == undefined || agentKey == null) {
        throw "Missing the required parameter 'agentKey' when calling postApiV1SoftwareAgentsApiToken";
      }

      // verify the required parameter 'userKey' is set
      if (userKey == undefined || userKey == null) {
        throw "Missing the required parameter 'userKey' when calling postApiV1SoftwareAgentsApiToken";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'agent_key': agentKey,
        'user_key': userKey
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/api_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1SoftwareAgentsId operation.
     * @callback module:api/SoftwareagentsApi~putApiV1SoftwareAgentsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Software Agent
     * Update Software Agent  Updates the software agent details for a given UUID.
     * @param {String} id Software Agent UUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The Name of the Software Agent
     * @param {String} opts.description The Description of the Software Agent
     * @param {String} opts.repoUrl The Repo url of the Software Agent
     * @param {module:api/SoftwareagentsApi~putApiV1SoftwareAgentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1SoftwareAgentsId = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1SoftwareAgentsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'description': opts['description'],
        'repo_url': opts['repoUrl']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1SoftwareAgentsIdApiKey operation.
     * @callback module:api/SoftwareagentsApi~putApiV1SoftwareAgentsIdApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-generate software agent API key
     * Re-generate software agent API key  regenerates software_agent api_key
     * @param {String} id Software agent UUID
     * @param {module:api/SoftwareagentsApi~putApiV1SoftwareAgentsIdApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1SoftwareAgentsIdApiKey = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1SoftwareAgentsIdApiKey";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/software_agents/{id}/api_key', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
