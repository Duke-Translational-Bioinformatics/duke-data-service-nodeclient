/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.RelationsApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Relations service.
   * @module api/RelationsApi
   * @version 0.0.2
   */

  /**
   * Constructs a new RelationsApi. 
   * @alias module:api/RelationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1RelationsId operation.
     * @callback module:api/RelationsApi~deleteApiV1RelationsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete relation
     * Delete relation  Marks a relation as being deleted.
     * @param {String} id Relation UUID
     * @param {module:api/RelationsApi~deleteApiV1RelationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1RelationsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1RelationsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1RelationsId operation.
     * @callback module:api/RelationsApi~getApiV1RelationsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View relation
     * View relation  Show information about a Relation. Requires ownership of the relation, or visibility to a single node for the specified relation
     * @param {String} id Relation UUID
     * @param {module:api/RelationsApi~getApiV1RelationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1RelationsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1RelationsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1RelationsObjectKindObjectId operation.
     * @callback module:api/RelationsApi~getApiV1RelationsObjectKindObjectIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List provenance relations
     * List provenance relations  List the relations for a provenance node; this only lists direct relations for the node that are a single hop away.
     * @param {String} objectKind Object kind
     * @param {String} objectId Object UUID
     * @param {module:api/RelationsApi~getApiV1RelationsObjectKindObjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1RelationsObjectKindObjectId = function(objectKind, objectId, callback) {
      var postBody = null;

      // verify the required parameter 'objectKind' is set
      if (objectKind == undefined || objectKind == null) {
        throw "Missing the required parameter 'objectKind' when calling getApiV1RelationsObjectKindObjectId";
      }

      // verify the required parameter 'objectId' is set
      if (objectId == undefined || objectId == null) {
        throw "Missing the required parameter 'objectId' when calling getApiV1RelationsObjectKindObjectId";
      }


      var pathParams = {
        'object_kind': objectKind,
        'object_id': objectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/{object_kind}/{object_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1RelationsUsed operation.
     * @callback module:api/RelationsApi~postApiV1RelationsUsedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create used relation
     * Create used relation  Creates a WasUsedBy relationship. Entity cannot be used by an Activity that generated the same Entity.
     * @param {String} activityId Activity UUID
     * @param {String} entityKind Entity kind
     * @param {String} entityId Entity UUID
     * @param {module:api/RelationsApi~postApiV1RelationsUsedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1RelationsUsed = function(activityId, entityKind, entityId, callback) {
      var postBody = null;

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw "Missing the required parameter 'activityId' when calling postApiV1RelationsUsed";
      }

      // verify the required parameter 'entityKind' is set
      if (entityKind == undefined || entityKind == null) {
        throw "Missing the required parameter 'entityKind' when calling postApiV1RelationsUsed";
      }

      // verify the required parameter 'entityId' is set
      if (entityId == undefined || entityId == null) {
        throw "Missing the required parameter 'entityId' when calling postApiV1RelationsUsed";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'activity[id]': activityId,
        'entity[kind]': entityKind,
        'entity[id]': entityId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/used', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1RelationsWasDerivedFrom operation.
     * @callback module:api/RelationsApi~postApiV1RelationsWasDerivedFromCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create was derived from relation
     * Create was derived from relation  Creates a WasDerivedFrom relationship.
     * @param {String} usedEntityKind Entity kind
     * @param {String} usedEntityId Entity UUID
     * @param {String} generatedEntityKind Entity kind
     * @param {String} generatedEntityId Entity UUID
     * @param {module:api/RelationsApi~postApiV1RelationsWasDerivedFromCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1RelationsWasDerivedFrom = function(usedEntityKind, usedEntityId, generatedEntityKind, generatedEntityId, callback) {
      var postBody = null;

      // verify the required parameter 'usedEntityKind' is set
      if (usedEntityKind == undefined || usedEntityKind == null) {
        throw "Missing the required parameter 'usedEntityKind' when calling postApiV1RelationsWasDerivedFrom";
      }

      // verify the required parameter 'usedEntityId' is set
      if (usedEntityId == undefined || usedEntityId == null) {
        throw "Missing the required parameter 'usedEntityId' when calling postApiV1RelationsWasDerivedFrom";
      }

      // verify the required parameter 'generatedEntityKind' is set
      if (generatedEntityKind == undefined || generatedEntityKind == null) {
        throw "Missing the required parameter 'generatedEntityKind' when calling postApiV1RelationsWasDerivedFrom";
      }

      // verify the required parameter 'generatedEntityId' is set
      if (generatedEntityId == undefined || generatedEntityId == null) {
        throw "Missing the required parameter 'generatedEntityId' when calling postApiV1RelationsWasDerivedFrom";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'used_entity[kind]': usedEntityKind,
        'used_entity[id]': usedEntityId,
        'generated_entity[kind]': generatedEntityKind,
        'generated_entity[id]': generatedEntityId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/was_derived_from', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1RelationsWasGeneratedBy operation.
     * @callback module:api/RelationsApi~postApiV1RelationsWasGeneratedByCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create was generated by relation
     * Create was generated by relation  Creates a WasGeneratedBy relationship. Entity can only be generated by one Activity, and cannot be used by the same Activity.
     * @param {String} activityId Activity UUID
     * @param {String} entityKind Entity kind
     * @param {String} entityId Entity UUID
     * @param {module:api/RelationsApi~postApiV1RelationsWasGeneratedByCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1RelationsWasGeneratedBy = function(activityId, entityKind, entityId, callback) {
      var postBody = null;

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw "Missing the required parameter 'activityId' when calling postApiV1RelationsWasGeneratedBy";
      }

      // verify the required parameter 'entityKind' is set
      if (entityKind == undefined || entityKind == null) {
        throw "Missing the required parameter 'entityKind' when calling postApiV1RelationsWasGeneratedBy";
      }

      // verify the required parameter 'entityId' is set
      if (entityId == undefined || entityId == null) {
        throw "Missing the required parameter 'entityId' when calling postApiV1RelationsWasGeneratedBy";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'activity[id]': activityId,
        'entity[kind]': entityKind,
        'entity[id]': entityId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/was_generated_by', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1RelationsWasInvalidatedBy operation.
     * @callback module:api/RelationsApi~postApiV1RelationsWasInvalidatedByCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create was invalidated by relation
     * Create was invalidated by relation  Creates a WasInvalidatedBy relationship.
     * @param {String} activityId Activity UUID
     * @param {String} entityKind Entity kind
     * @param {String} entityId Entity UUID
     * @param {module:api/RelationsApi~postApiV1RelationsWasInvalidatedByCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1RelationsWasInvalidatedBy = function(activityId, entityKind, entityId, callback) {
      var postBody = null;

      // verify the required parameter 'activityId' is set
      if (activityId == undefined || activityId == null) {
        throw "Missing the required parameter 'activityId' when calling postApiV1RelationsWasInvalidatedBy";
      }

      // verify the required parameter 'entityKind' is set
      if (entityKind == undefined || entityKind == null) {
        throw "Missing the required parameter 'entityKind' when calling postApiV1RelationsWasInvalidatedBy";
      }

      // verify the required parameter 'entityId' is set
      if (entityId == undefined || entityId == null) {
        throw "Missing the required parameter 'entityId' when calling postApiV1RelationsWasInvalidatedBy";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'activity[id]': activityId,
        'entity[kind]': entityKind,
        'entity[id]': entityId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/relations/was_invalidated_by', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
