/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.UploadsApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Uploads service.
   * @module api/UploadsApi
   * @version 0.0.2
   */

  /**
   * Constructs a new UploadsApi. 
   * @alias module:api/UploadsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getApiV1UploadsId operation.
     * @callback module:api/UploadsApi~getApiV1UploadsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View upload details/status
     * View upload details/status  View upload details/status
     * @param {String} id Globally unique id of the upload object.
     * @param {module:api/UploadsApi~getApiV1UploadsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1UploadsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1UploadsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/uploads/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1UploadsIdChunks operation.
     * @callback module:api/UploadsApi~putApiV1UploadsIdChunksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pre-signed URL to upload the next chunk
     * Get pre-signed URL to upload the next chunk  Get pre-signed URL to upload the next chunk. This will also ensure that the project container exists in the storage_provider.
     * @param {String} id The Upload Id
     * @param {Integer} _number The chunk number.
     * @param {Integer} size The size of the chunk in bytes that the client will upload using the pre-signed URL.
     * @param {String} hashValue The chunk hash computed by the client.
     * @param {String} hashAlgorithm The hash algorithm used (i.e. md5, sha256, sha1, etc.) - this must be the default algorithm supported by storage provider.
     * @param {module:api/UploadsApi~putApiV1UploadsIdChunksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1UploadsIdChunks = function(id, _number, size, hashValue, hashAlgorithm, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1UploadsIdChunks";
      }

      // verify the required parameter '_number' is set
      if (_number == undefined || _number == null) {
        throw "Missing the required parameter '_number' when calling putApiV1UploadsIdChunks";
      }

      // verify the required parameter 'size' is set
      if (size == undefined || size == null) {
        throw "Missing the required parameter 'size' when calling putApiV1UploadsIdChunks";
      }

      // verify the required parameter 'hashValue' is set
      if (hashValue == undefined || hashValue == null) {
        throw "Missing the required parameter 'hashValue' when calling putApiV1UploadsIdChunks";
      }

      // verify the required parameter 'hashAlgorithm' is set
      if (hashAlgorithm == undefined || hashAlgorithm == null) {
        throw "Missing the required parameter 'hashAlgorithm' when calling putApiV1UploadsIdChunks";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'number': _number,
        'size': size,
        'hash[value]': hashValue,
        'hash[algorithm]': hashAlgorithm
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/uploads/{id}/chunks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1UploadsIdComplete operation.
     * @callback module:api/UploadsApi~putApiV1UploadsIdCompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete the chunked file upload
     * Complete the chunked file upload  Complete the chunked file upload
     * @param {String} hashValue The entire file hash (computed by client).
     * @param {String} hashAlgorithm The algorithm used by client to compute entire file hash (i.e. md5, sha256, sha1, etc.).
     * @param {Integer} id 
     * @param {module:api/UploadsApi~putApiV1UploadsIdCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1UploadsIdComplete = function(hashValue, hashAlgorithm, id, callback) {
      var postBody = null;

      // verify the required parameter 'hashValue' is set
      if (hashValue == undefined || hashValue == null) {
        throw "Missing the required parameter 'hashValue' when calling putApiV1UploadsIdComplete";
      }

      // verify the required parameter 'hashAlgorithm' is set
      if (hashAlgorithm == undefined || hashAlgorithm == null) {
        throw "Missing the required parameter 'hashAlgorithm' when calling putApiV1UploadsIdComplete";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1UploadsIdComplete";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'hash[value]': hashValue,
        'hash[algorithm]': hashAlgorithm
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/uploads/{id}/complete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1UploadsIdHashes operation.
     * @callback module:api/UploadsApi~putApiV1UploadsIdHashesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report upload hash
     * Report upload hash  Report hash (fingerprint) for the uploaded (or to be uploaded) file.
     * @param {String} value The entire file hash (computed by client).
     * @param {String} algorithm The algorithm used by client to compute entire file hash (i.e. md5, sha256, sha1, etc.).
     * @param {Integer} id 
     * @param {module:api/UploadsApi~putApiV1UploadsIdHashesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1UploadsIdHashes = function(value, algorithm, id, callback) {
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value == undefined || value == null) {
        throw "Missing the required parameter 'value' when calling putApiV1UploadsIdHashes";
      }

      // verify the required parameter 'algorithm' is set
      if (algorithm == undefined || algorithm == null) {
        throw "Missing the required parameter 'algorithm' when calling putApiV1UploadsIdHashes";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1UploadsIdHashes";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'value': value,
        'algorithm': algorithm
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/uploads/{id}/hashes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
