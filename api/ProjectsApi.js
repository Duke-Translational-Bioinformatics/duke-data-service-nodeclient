/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.ProjectsApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Projects service.
   * @module api/ProjectsApi
   * @version 0.0.2
   */

  /**
   * Constructs a new ProjectsApi. 
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteApiV1ProjectsId operation.
     * @callback module:api/ProjectsApi~deleteApiV1ProjectsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * Delete a project  Marks a project as being deleted.
     * @param {String} id Project UUID
     * @param {module:api/ProjectsApi~deleteApiV1ProjectsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1ProjectsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteApiV1ProjectsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiV1ProjectsProjectIdAffiliatesUserId operation.
     * @callback module:api/ProjectsApi~deleteApiV1ProjectsProjectIdAffiliatesUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project affiliation
     * Delete project affiliation  Remove project level affiliation for a user
     * @param {Integer} projectId 
     * @param {Integer} userId 
     * @param {module:api/ProjectsApi~deleteApiV1ProjectsProjectIdAffiliatesUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1ProjectsProjectIdAffiliatesUserId = function(projectId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling deleteApiV1ProjectsProjectIdAffiliatesUserId";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling deleteApiV1ProjectsProjectIdAffiliatesUserId";
      }


      var pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/affiliates/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiV1ProjectsProjectIdPermissionsUserId operation.
     * @callback module:api/ProjectsApi~deleteApiV1ProjectsProjectIdPermissionsUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke project level permissions for user
     * Revoke project level permissions for user  Revoke project permissions
     * @param {Integer} projectId 
     * @param {Integer} userId 
     * @param {module:api/ProjectsApi~deleteApiV1ProjectsProjectIdPermissionsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApiV1ProjectsProjectIdPermissionsUserId = function(projectId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling deleteApiV1ProjectsProjectIdPermissionsUserId";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling deleteApiV1ProjectsProjectIdPermissionsUserId";
      }


      var pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/permissions/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1Projects operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List projects
     * List projects  Lists projects for which the current user has the \&quot;view_project\&quot; permission.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Requested Page (default first page)
     * @param {Integer} opts.perPage Number of Objects per page (default 25)
     * @param {module:api/ProjectsApi~getApiV1ProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1Projects = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsId operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project details
     * View project details  Returns the project details for a given project uuid.
     * @param {String} id Project UUID
     * @param {module:api/ProjectsApi~getApiV1ProjectsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1ProjectsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsIdChildren operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsIdChildrenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project children
     * List project children  Returns the immediate children of the project.
     * @param {Integer} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nameContains list children whose name contains this string
     * @param {Integer} opts.page Requested Page (default first page)
     * @param {Integer} opts.perPage Number of Objects per page (default 25)
     * @param {module:api/ProjectsApi~getApiV1ProjectsIdChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsIdChildren = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1ProjectsIdChildren";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'name_contains': opts['nameContains'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{id}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsProjectIdAffiliates operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsProjectIdAffiliatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project affiliations
     * List project affiliations  List project affiliations
     * @param {Integer} projectId 
     * @param {module:api/ProjectsApi~getApiV1ProjectsProjectIdAffiliatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsProjectIdAffiliates = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getApiV1ProjectsProjectIdAffiliates";
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/affiliates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsProjectIdAffiliatesUserId operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsProjectIdAffiliatesUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project level affiliation for a user
     * View project level affiliation for a user  View project level affiliation for a user
     * @param {Integer} projectId 
     * @param {Integer} userId 
     * @param {module:api/ProjectsApi~getApiV1ProjectsProjectIdAffiliatesUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsProjectIdAffiliatesUserId = function(projectId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getApiV1ProjectsProjectIdAffiliatesUserId";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getApiV1ProjectsProjectIdAffiliatesUserId";
      }


      var pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/affiliates/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsProjectIdPermissions operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsProjectIdPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project level permissions
     * List project level permissions  Lists project permissions.
     * @param {Integer} projectId 
     * @param {module:api/ProjectsApi~getApiV1ProjectsProjectIdPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsProjectIdPermissions = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getApiV1ProjectsProjectIdPermissions";
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsProjectIdPermissionsUserId operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsProjectIdPermissionsUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project level permissions for a user
     * View project level permissions for a user  View project permissions.
     * @param {Integer} projectId 
     * @param {Integer} userId 
     * @param {module:api/ProjectsApi~getApiV1ProjectsProjectIdPermissionsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsProjectIdPermissionsUserId = function(projectId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getApiV1ProjectsProjectIdPermissionsUserId";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling getApiV1ProjectsProjectIdPermissionsUserId";
      }


      var pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/permissions/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsProjectIdTransfers operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsProjectIdTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project transfers
     * List project transfers  list project transfers
     * @param {Integer} projectId 
     * @param {module:api/ProjectsApi~getApiV1ProjectsProjectIdTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsProjectIdTransfers = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getApiV1ProjectsProjectIdTransfers";
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/transfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1ProjectsProjectIdUploads operation.
     * @callback module:api/ProjectsApi~getApiV1ProjectsProjectIdUploadsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List file uploads for a project
     * List file uploads for a project  List file uploads for a project
     * @param {String} projectId The ID of the Project
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Requested Page (default first page)
     * @param {Integer} opts.perPage Number of Objects per page (default 25)
     * @param {module:api/ProjectsApi~getApiV1ProjectsProjectIdUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1ProjectsProjectIdUploads = function(projectId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getApiV1ProjectsProjectIdUploads";
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/uploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1Projects operation.
     * @callback module:api/ProjectsApi~postApiV1ProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * Create a project  Creates a project for the given payload.
     * @param {String} name The Name of the Project
     * @param {String} description The Description of the Project
     * @param {module:api/ProjectsApi~postApiV1ProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1Projects = function(name, description, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling postApiV1Projects";
      }

      // verify the required parameter 'description' is set
      if (description == undefined || description == null) {
        throw "Missing the required parameter 'description' when calling postApiV1Projects";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'description': description
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1ProjectsProjectIdTransfers operation.
     * @callback module:api/ProjectsApi~postApiV1ProjectsProjectIdTransfersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a project transfer
     * Initiate a project transfer  Initiates a project transfer from the current owner to a new owner or list of owners.
     * @param {String} projectId The ID of the Project
     * @param {Array.<String>} toUsersId The unique id of a user
     * @param {module:api/ProjectsApi~postApiV1ProjectsProjectIdTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1ProjectsProjectIdTransfers = function(projectId, toUsersId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling postApiV1ProjectsProjectIdTransfers";
      }

      // verify the required parameter 'toUsersId' is set
      if (toUsersId == undefined || toUsersId == null) {
        throw "Missing the required parameter 'toUsersId' when calling postApiV1ProjectsProjectIdTransfers";
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'to_users[][id]': this.apiClient.buildCollectionParam(toUsersId, 'csv')
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/transfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1ProjectsProjectIdUploads operation.
     * @callback module:api/ProjectsApi~postApiV1ProjectsProjectIdUploadsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a chunked file upload for a project
     * Initiate a chunked file upload for a project  This is the first step in uploading a large file. An upload objects is created along with a composite status object used to track the progress of the chunked upload.
     * @param {String} projectId The ID of the Project
     * @param {String} name The name of the client file to upload.
     * @param {String} contentType Valid Media Type
     * @param {Integer} size The size in bytes
     * @param {module:api/ProjectsApi~postApiV1ProjectsProjectIdUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1ProjectsProjectIdUploads = function(projectId, name, contentType, size, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling postApiV1ProjectsProjectIdUploads";
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw "Missing the required parameter 'name' when calling postApiV1ProjectsProjectIdUploads";
      }

      // verify the required parameter 'contentType' is set
      if (contentType == undefined || contentType == null) {
        throw "Missing the required parameter 'contentType' when calling postApiV1ProjectsProjectIdUploads";
      }

      // verify the required parameter 'size' is set
      if (size == undefined || size == null) {
        throw "Missing the required parameter 'size' when calling postApiV1ProjectsProjectIdUploads";
      }


      var pathParams = {
        'project_id': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': name,
        'content_type': contentType,
        'size': size
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1ProjectsId operation.
     * @callback module:api/ProjectsApi~putApiV1ProjectsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project
     * Update a project  Update the project details for a given project uuid.
     * @param {String} id Project UUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The Name of the Project
     * @param {String} opts.description The Description of the Project
     * @param {module:api/ProjectsApi~putApiV1ProjectsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1ProjectsId = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putApiV1ProjectsId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'description': opts['description']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1ProjectsProjectIdAffiliatesUserId operation.
     * @callback module:api/ProjectsApi~putApiV1ProjectsProjectIdAffiliatesUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate affiliate to a project
     * Associate affiliate to a project  Deletes any existing project role for the user and assigns new role.
     * @param {String} projectRoleId 
     * @param {Integer} projectId 
     * @param {Integer} userId 
     * @param {module:api/ProjectsApi~putApiV1ProjectsProjectIdAffiliatesUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1ProjectsProjectIdAffiliatesUserId = function(projectRoleId, projectId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'projectRoleId' is set
      if (projectRoleId == undefined || projectRoleId == null) {
        throw "Missing the required parameter 'projectRoleId' when calling putApiV1ProjectsProjectIdAffiliatesUserId";
      }

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling putApiV1ProjectsProjectIdAffiliatesUserId";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling putApiV1ProjectsProjectIdAffiliatesUserId";
      }


      var pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'project_role[id]': projectRoleId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/affiliates/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiV1ProjectsProjectIdPermissionsUserId operation.
     * @callback module:api/ProjectsApi~putApiV1ProjectsProjectIdPermissionsUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grant project level permissions to a user
     * Grant project level permissions to a user  Revokes (deletes) any existing project level authorization roles for the user and grants new set.
     * @param {String} authRoleId 
     * @param {Integer} projectId 
     * @param {Integer} userId 
     * @param {module:api/ProjectsApi~putApiV1ProjectsProjectIdPermissionsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putApiV1ProjectsProjectIdPermissionsUserId = function(authRoleId, projectId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'authRoleId' is set
      if (authRoleId == undefined || authRoleId == null) {
        throw "Missing the required parameter 'authRoleId' when calling putApiV1ProjectsProjectIdPermissionsUserId";
      }

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling putApiV1ProjectsProjectIdPermissionsUserId";
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling putApiV1ProjectsProjectIdPermissionsUserId";
      }


      var pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'auth_role[id]': authRoleId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/{project_id}/permissions/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
