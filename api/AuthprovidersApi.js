/**
 * Duke Data Service API.
 * REST API to the Duke Data Service. Some requests require Authentication.
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.DukeDataServiceApi) {
      root.DukeDataServiceApi = {};
    }
    root.DukeDataServiceApi.AuthprovidersApi = factory(root.DukeDataServiceApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Authproviders service.
   * @module api/AuthprovidersApi
   * @version 0.0.2
   */

  /**
   * Constructs a new AuthprovidersApi. 
   * @alias module:api/AuthprovidersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getApiV1AuthProviders operation.
     * @callback module:api/AuthprovidersApi~getApiV1AuthProvidersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Authentication Providers
     * List Authentication Providers  Lists Authentication Providers
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Requested Page (default first page)
     * @param {Integer} opts.perPage Number of Objects per page (default 25)
     * @param {module:api/AuthprovidersApi~getApiV1AuthProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1AuthProviders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/auth_providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1AuthProvidersId operation.
     * @callback module:api/AuthprovidersApi~getApiV1AuthProvidersIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Authentication Provider Details
     * Show Authentication Provider Details  Show Authentication Provider Details
     * @param {Integer} id 
     * @param {module:api/AuthprovidersApi~getApiV1AuthProvidersIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1AuthProvidersId = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1AuthProvidersId";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/auth_providers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1AuthProvidersIdAffiliates operation.
     * @callback module:api/AuthprovidersApi~getApiV1AuthProvidersIdAffiliatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Auth Provider Affiliates
     * List Auth Provider Affiliates  List Auth Provider Affiliates
     * @param {String} id AuthenticationProvider UUID
     * @param {String} fullNameContains string contained in name(must be at least 3 characters)
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Requested Page (default first page)
     * @param {Integer} opts.perPage Number of Objects per page (default 25)
     * @param {module:api/AuthprovidersApi~getApiV1AuthProvidersIdAffiliatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1AuthProvidersIdAffiliates = function(id, fullNameContains, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1AuthProvidersIdAffiliates";
      }

      // verify the required parameter 'fullNameContains' is set
      if (fullNameContains == undefined || fullNameContains == null) {
        throw "Missing the required parameter 'fullNameContains' when calling getApiV1AuthProvidersIdAffiliates";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'full_name_contains': fullNameContains,
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/auth_providers/{id}/affiliates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV1AuthProvidersIdAffiliatesUid operation.
     * @callback module:api/AuthprovidersApi~getApiV1AuthProvidersIdAffiliatesUidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View Auth Provider Affiliate
     * View Auth Provider Affiliate  View Auth Provider Affiliate
     * @param {String} id AuthenticationProvider UUID
     * @param {String} uid uid of the Affiliate from the AuthenticationProvider
     * @param {module:api/AuthprovidersApi~getApiV1AuthProvidersIdAffiliatesUidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getApiV1AuthProvidersIdAffiliatesUid = function(id, uid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getApiV1AuthProvidersIdAffiliatesUid";
      }

      // verify the required parameter 'uid' is set
      if (uid == undefined || uid == null) {
        throw "Missing the required parameter 'uid' when calling getApiV1AuthProvidersIdAffiliatesUid";
      }


      var pathParams = {
        'id': id,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/auth_providers/{id}/affiliates/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV1AuthProvidersIdAffiliatesUidDdsUser operation.
     * @callback module:api/AuthprovidersApi~postApiV1AuthProvidersIdAffiliatesUidDdsUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User Account for Affiliate
     * Create User Account for Affiliate  Create User Account for Affiliate
     * @param {String} id AuthenticationProvider UUID
     * @param {String} uid uid of the Affiliate from the AuthenticationProvider
     * @param {module:api/AuthprovidersApi~postApiV1AuthProvidersIdAffiliatesUidDdsUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postApiV1AuthProvidersIdAffiliatesUidDdsUser = function(id, uid, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling postApiV1AuthProvidersIdAffiliatesUidDdsUser";
      }

      // verify the required parameter 'uid' is set
      if (uid == undefined || uid == null) {
        throw "Missing the required parameter 'uid' when calling postApiV1AuthProvidersIdAffiliatesUidDdsUser";
      }


      var pathParams = {
        'id': id,
        'uid': uid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/auth_providers/{id}/affiliates/{uid}/dds_user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
